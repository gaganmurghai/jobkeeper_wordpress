// Breakpoint Map ** For use in @include respond-to(small/medium/large) **
$breakpoints: (

	'extremesize': ( max-width:1920px ),
	'extrasize': ( max-width:1900px ),
	'maxsize'    : ( max-width:1600px ),
  'maxdeskmax'    : ( max-width:1450px ),
	'maxdesk'    : ( max-width:1369px ),
  'midxdesk'   : ( max-width:1250px ),
  'minxdesk'   : ( max-width:1200px ),
	'extralarge' : ( max-width:1199px ),
  'maxlargemax' : ( max-width:1080px ),
	'maxlarge'   : ( max-width:1024px ),
	'large'      : ( max-width: 991px ),
	'minlarge'   : ( max-width:870px ),
  'minlargesall' : ( max-width:870px ),
	'special'    : ( min-width: 768px ),
	'maxmedium'  : ( max-width: 767px ),	
	'maxsmall'   : ( max-width: 640px ),
	'minismall'  : ( max-width: 540px ),
  'minismallmin'  : ( max-width: 500px ),	
 	'small'      : ( max-width: 480px ),
	'extrasmall' : ( max-width: 400px ),
  'extrasmallmin' : ( max-width: 360px ),   	
  	'medium'     : ( min-width: 760px )

);

// Just change the next line for a breakpoint, and everything will work around it.
$mobilebreak: large;
$mobilemax: max#{$mobilebreak};
$mobilebreakshort: medium;
$mobilemaxshort: max#{$mobilebreakshort};

$desktopextremesize : extremesize;
$desktopextrasize : extrasize;
$desktopmaxsize     :    maxsize;
$desktopmaxdeskmax     :   maxdeskmax;
$desktopmaxdesk     :    maxdesk;
$desktopmaxdeskimid :    midxdesk;
$desktopmaxdeskimin :    minxdesk;


$mobileextralarge: extralarge;
$mobilemaxlargemax: maxlargemax;
$mobilemaxlarge: maxlarge;
$mobileminlarge: minlarge;
$mobileminlargesmall: minlargesall;

$mobilespecialview : special;

$mobilemaxmedium: maxmedium;

$mobilemaxsmall: maxsmall;

$mobileminismall: minismall;
$mobileminismall: minismallmin;

$mobilesmall: small;

$mobileextrasmall: extrasmall;
$mobileextrasmallmin: extrasmallmin;


//@mixin responsive elements
@mixin font-size($sizeValue: 12 ) {
  //fallback for old browsers
  font-size: $sizeValue + px; 
  font-size: ( 1 / ( $base-font-size / ($base-font-size * 0 + 1) ) * $sizeValue + rem );
}
@mixin line-height($heightValue: 12 ){
  //fallback for old browsers
  line-height: $heightValue + px;
  line-height: ( 1 / ( $base-font-size / ($base-font-size * 0 + 1) ) * $heightValue + rem );
}
@mixin respond-to($name) {
  @if map-has-key($breakpoints, $name) {
    @media #{inspect(map-get($breakpoints, $name))} {
      @content;
    }
  }
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
  //Usage Example:
  // .column {
  //    @respond-to(small) { width:30% };
  // }
}

// -- Retina Images
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    
    background-image: url($image);
    background-size: $width $height;
	
	// Usage Example: @include image-2x("logo2x.png", 100px, 25px);
  }
}





    
	
 
	
	
	
	


	
	



